#!/bin/sh
#
# Copyright (c) 2015 0xnz. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
#----------------------------------------------------------------
#
# Filename: install.sh
#
# Author:       Oxnz
# Email:        yunxinyi@gmail.com
# Created:      [2014-12-09 19:11:50 CST]
# Last-update:  [2015-12-04 19:11:50 CST]
# Description:  ANCHOR
#
# Version:		0.2.2
# Revision:		[None]
#
#================================================================
#

set -e
set -u
set -o pipefail

PROGNAME='INSTALL'
# version info, ref [http://semver.org] for more information
MAJORVER='0'
MINORVER='1'
PATCHVER='0'
RELEASE='beta'
VERSION="${MAJORVER}.${MINORVER}.${PATCHVER}-${RELEASE}"

# output
VERBOSE=1
DEBUG=false

# specify the install destination directory
PREFIX="${HOME}"
DESTDIR="${DESTDIR:-${PREFIX}/.shell-utils}"
LOGFILE=
TEMPTAR=

# url for the archive
ARCHURL='https://github.com/oxnz/shell-utils/archive/v0.1.0.tar.gz'
REPOURL='https://github.com/oxnz/shell-utils'

puts() {
	printf '%b\n' "$*"
}

##! @desc: test if given program exists
hascmd() {
	local prog="$1"
	which "$prog" > /dev/null 2>&1
}

openlog() {
	if LOGFILE="$(mktemp)"; then
		msgdump 'info' "open log file: '$LOGFILE'"
	else
		msgdump 'warning' "cannot create logfile"
		return 1
	fi
}

msgdump() {
	if [ $# -lt 2 ]; then
		msgdump "error" "msgdump: 2+ arguments expected, but $# found: '$*'"
		return 1
	fi
	local color=
	local norm='\033[m'
	local level="$(puts "$1" | tr '[:lower:]' '[:upper:]')"
	shift
	local msg="$*"
	local out=1

	if [ -f "${LOGFILE}" ]; then
		puts "[${level}] ${msg}" >> "${LOGFILE}"
	fi

	case "${level}" in
		DEBUG)
			if [ "${VERBOSE}" -gt 0 ]; then
				color="\033[36m"
			else
				return
			fi
			;;
		INFO)
			color="\033[32m"
			;;
		WARNING)
			color="\033[33m"
			out=2
			;;
		ERROR)
			color="\033[31m"
			out=2
			;;
		*)
			msgdump 'warning' "unexpected level: [$level], msg: [$msg]"
			;;
	esac

	[ -t "$out" ] && level="${color}${level}${norm}"
	puts "[$level] $msg" >&"${out}"
}

cleanup() {
    local error=0
    msgdump 'info' 'cleaning up ...'
    if [ -f "$TEMPTAR" ]; then
        msgdump 'info' "remove temporary file: '$TEMPTAR'"
        if ! unlink "$TEMPTAR"; then
            msgdump 'warning' "cannot remove temporary file: '$TEMPTAR'"
        fi
    fi
    msgdump 'info' 'clean up successfully'
}

##! @desc: signal handler
sigproc() {
	local intrrupted="${1:-false}"
	if $interrupted; then
		if cleanup; then
			msgdump 'warning' 'interrupted, abort'
		else
			msgdump 'error' 'clean up falied, please remove manually'
		fi
	else
		trap 'sigproc true' INT TERM
		puts '[press ctrl-c again to terminate]'
	fi
}

download() {
    local url="$1"
    local dst="$2"
    trap "unlink "$dst"" INT TERM
    msgdump 'info' "downloading to $dst ..."
    if hascmd wget; then
        msgdump 'debug' "wget $url -O $dst"
        if ! wget -nv "$url" -O "$dst"; then
            [ -f "$dst" ] && unlink "$dst"
            return 1
        fi
    elif hascmd curl; then
        msgdump 'debug' "curl -o $dst $url"
        if ! curl -o "$dst" "$url"; then
            [ -f "$dst" ] && unlink "$dst"
            return 1
        fi
    else
        msgdump 'error' "no download tool found"
        msgdump 'error' "unable to download shell-utils"
        return 1
    fi
    msgdump 'info' 'download complete'
}

##! @param.1: tar archive
##! @param.2: dest dir
extract() {
    local archive="$1"
	local destdir="$2"

    msgdump 'info' "extracting archive: [${tar}] to [$destdir] ..."
	# XXX need to preserve permissions when decompressing
	if ! tar pzxf "${archive}" -C "${DESTDIR}"; then
		if $DEBUG; then
			msgdump 'error' "extract failed: [tar pzxf $archive -C $destdir]"
		else
			msgdump 'error' "extract failed: '$archive'"
		fi
		return 1
	fi
	msgdump 'info' 'extract complete'
}

# pre-install process
# * detect user os env
# * setup required options
# * detect local install or
# * git clone or
# * download->extract or
preinst() {
	msgdump 'info' 'pre install processing ...'
	msgdump 'info' 'pre install checking ...'
	if [ -n "${ZSH_VERSION:-}" ]; then
		emulate sh > /dev/null 2>&1 || true
	else
		case "$(set -o 2> /dev/null)" in
			*posix*) :
				set -o posix
				;;
			*)
				:
				;;
		esac
	fi
	# Don't use :- since 4.3BSD and earlier shells don't like it.
	[ -n "${SHELL-/bin/sh}" ] && case "$SHELL" in
		csh|tcsh)
			msgdump 'warning' "support for $0 is incomplete for now"
			msgdump 'warning' "please do not use in production"
			;;
		ash)
			msgdump 'error' "sorry, ash is not supported for now"
			return 1
			;;
		/bin/bash)
			msgdump 'debug' "install for shell: [$SHELL]"
			;;
		/bin/sh)
			msgdump 'debug' "install for shell: [$SHELL]"
			;;
		*)
			msgdump 'error' "unsupported shell: [$SHELL]"
			return 1
			;;
	esac
	if [ -e "${DESTDIR}" ]; then
		if [ -d "$DESTDIR" -a -s "$DESTDIR/core/core.sh" ]; then
			# already have all the stuff, just need to install
			openlog || true
			msgdump 'info' 'previous installation detected, direct to install'
			return
		else
			msgdump 'error' "destination already exists: [${DESTDIR}]"
			return 1
		fi
	fi

	if hascmd 'git'; then
		msgdump 'info' "retrieve from repo: $REPOURL"
		trap "rm -rf "${DESTDIR}"" INT TERM
		if ! git clone "${REPOURL}" "${DESTDIR}"; then
			msgdump 'error' 'git clone failed'
			return 1
		fi
	else
		local tmp
		if ! tmp="$(mktemp)"; then
            msgdump 'error' 'cannot create temporary file'
            return 1
        fi
        if ! download "$ARCHURL" "$tmp"; then
            msgdump 'error' 'download failed'
            return 1
        fi
        if ! extract "$tmp" "$DESTDIR"; then
            msgdump 'error' 'extract failed'
            return 1
        fi
	fi
	msgdump 'info' 'pre install success'
}

# post-install process
postinst() {
	msgdump 'info' 'post install processing ...'
	logdir="${DESTDIR}/var/log"
	logfile="$logdir/install.log"
	if [ ! -e "${logdir}" ] && ! mkdir -p "${logdir}"; then
		msgdump 'error' "cannot create log dir: [${logdir}]"
		return 1
	fi
	if mv "${LOGFILE}" "${logfile}"; then
		LOGFILE="$logfile"
	else
		msgdump 'error' "cannot move log file to log dir: [${LOGFILE} -> ${logdir}]"
		return 1
	fi
	if ! : > "${logdir}/shell.log"; then
		msgdump 'warning' "cannot create log file: [${logdir}/shell.log]"
		return 1
	fi
	msgdump 'info' 'post install success'
}

##! @desc: install process
# task:
# 	1. make backup dir if needed
#	2. backup links in $HOME dir
#	3. create links $DESTDIR/rc/* -> $HOME/*
inst() {
	local src
	local dst
	local bkpdir="${DESTDIR}/var/bkp"

	if [ ! -d "${bkpdir}" ]; then
	   if !	mkdir -p "${bkpdir}"; then
		   msgdump 'error' "create backup dir failed: [${bkpdir}]"
		   return 1
	   fi
	fi
	for src in "${DESTDIR}/rc/"*; do
		dst="${HOME}/.$(basename "${src}")"
		if [ -h "${dst}" ]; then
			msgdump 'debug' "unlink symbol link: [${dst}]"
			if ! unlink "${dst}"; then
				msgdump 'warning' "unlink symbol link: [${dst}] failed"
				continue
			fi
		elif [ -e "${dst}" ]; then
			if mv "${dst}" "${bkpdir}"; then
				msgdump 'info' "backup [${dst}] to [${bkpdir}]"
			else
				msgdump 'warning' "bakup [${dst}] to [${bkpdir}] failed"
				continue
			fi
		fi
		if ln -s "${src}" "${dst}"; then
			msgdump 'info' "install success: [${dst}]"
		else
			msgdump 'warning' "failed to create symbol link: [${dst}]"
		fi
	done
}

doinst() {
	if ! preinst; then
		msgdump 'error' 'pre install failed'
		return 1
	fi
	if ! inst; then
		msgdump 'error' "install process failed"
	fi
	if ! postinst; then
		msgdump 'warning' "post install failed"
	fi
	msgdump 'info' 'install complete successfully'
}

##! @desc: pre uninstall process
##! @task.1: gather information needed for uninstall
preuninst() {
	msgdump 'info' 'pre uninstall processing ...'
	msgdump 'info' 'collecting information for uninstall'
	if DESTDIR="$(dirname "$(dirname "$(pwd)/$0")")"; then
		msgdump 'info' "path: [${DESTDIR}]"
	else
		msgdump 'error' 'cannot find install path'
		return 1
	fi
	msgdump 'info' 'pre uninstall done'
}

uninst() {
	local src lnk dst bkp name
	for src in "${DESTDIR}"/rc/*; do
		name="$(basename "${src}")"
		lnk="${HOME}/.${name}"
		bkp="${DESTDIR}/var/bkp/${name}"
		if ! dst="$(readlink -e "${lnk}")"; then
			msgdump 'warning' "dangling symbol link found: [${lnk}]"
		fi
		if [ "${dst}" = "${src}" ]; then
			msgdump 'info' "uninstalling [${lnk}]"
			if ! unlink "${lnk}"; then
				msgdump 'warning' "unable to unlink [${lnk}]"
				continue
			fi
		else
			msgdump 'warning' "[${lnk}] changed since install, ignored"
			continue
		fi
		if [ -e "${bkp}" ]; then
			msgdump 'info' "restoring [${bkp}] to [${lnk}]"
			if ! mv "${bkp}" "${lnk}"; then
				msgdump 'error' "unable to restore [${lnk}]"
				continue
			fi
		fi
	done
	msgdump 'info' 'uninstall complete successfully'
}

postuninst() {
	msgdump 'info' 'post install processing ...'
	msgdump 'info' 'post install done'
}

##! @desc: do uninstall process
douninst() {
	if ! preuninst; then
		msgdump 'error' 'pre uninstall process failed'
		return 1
	fi
	if ! uninst; then
		msgdump 'error' 'uninstall process failed'
		return 1
	fi
	if ! postuninst; then
		msgdump 'error' 'post uninstall process failed'
		return 1
	fi
	msgdump 'info' 'uninstall complete successfully'
}

colorize() {
	local red=31
	local green=32
	local yellow=33
	local blue=34
	local norm='\033[0m'
	local line
	while read -r line; do
		puts "$line"
	done
}

banner() {
	[ -t 1 ] && puts "\033[32;2m"
	cat <<-EOF
	         __         ____            __  _ __
	   _____/ /_  ___  / / /     __  __/ /_(_) /____
	  / ___/ __ \/ _ \/ / /_____/ / / / __/ / / ___/
	 (__  ) / / /  __/ / /_____/ /_/ / /_/ / (__  )
	/____/_/ /_/\___/_/_/      \__,_/\__/_/_/____/
	------------------------------------------------
		   shell-utils installer ${VERSION}
	------------------------------------------------
	EOF
	[ -t 1 ] && puts "\033[0m"
}

hascmd realpath || realpath() {
	local file="$1"
	while [ -L "$file" ]; do
		file="$(readlink "$file")"
	done
	local dir
	local base
	if [ -d "$file" ]; then
		base="";
		dir="$file"
	else
		base="/$(basename "$file")"
		dir="$(dirname "$file")"
	fi
	dir="$(cd "$dir" && pwd)"
	puts "$dir$base"
}

main() {
	banner
	local self="$0"
	if [ -f "$self" ]; then
		if ! self="$(realpath "$self")"; then
			msgdump 'error' "realpath failed: '$self'"
			return 1
		fi
		local home="$(dirname "$(dirname "$self")")"
		if [ -d "$home" -a -s "$home/core/core.sh" ]; then
			# already download, just install
			DESTDIR="$home"
		fi
	fi
	local OPTIND=1
	local opt
	local act=''
    while getopts "dD:hiuv" opt; do
		case $opt in
			d)
				DESTDIR="$OPTARG"
				if [ -d $DESTDIR ]; then
					msgdump 'error' "directory already exists: [$DESTDIR]"
					return 1
				fi
				;;
			D)
				DEBUG=true
				VERBOSE=$((VERBOSE+1))
				set -x
				;;
			h)
				cat <<-EOH
				Usage: $0 [options]
				  options:
				    -d <dir>  install to the specified dir
				    -D	      enable debug mode
				    -h	      show this message and exit
					-i        perform install
					-u        perform uninstall
				    -v	      specify verbose level
				EOH
				return
				;;
			i)
				act='install'
				;;
			u)
				act='uninst'
				;;
			v)
				VERBOSE=$((VERBOSE+1))
				;;
			?)
				# getopt will output appropriate error message
				return 1
				;;
		esac
	done
	shift $((OPTIND-1))

	if [ $# -ne 0 ]; then
		msgdump 'error' "unexpected argument(s): $@"
		return 1
	fi

	if [ -z "$act" ]; then
		case "$(basename "$0")" in
			install)
				act='inst'
				;;
			uninst)
				act='uninst'
				;;
		esac
	fi

	case "${act:-inst}" in
		uninst)
			if ! uninst; then
				msgdump 'error' "uninstall process failed"
				cat <<-EOF
				you may try uninstall manually, don't bother to fire a bug
				https://github.com/oxnz/shell-utils/issues
				EOF
				return 1
			fi
			;;
		inst)
			if ! doinst; then
				cat <<-EOF
				it seems something wrong happened during install,
				please refer to the ${LOGFILE} for more information
				bug report: https://github.com/oxnz/shell-utils/issues
				EOF
				return 1
			fi
			;;
		*)
			msgdump 'error' 'should never reached here, check code and try again'
			return 1
			;;
	esac
}

main "$@"

# TODO:
# 1. fix trap issue
# 2. add bin install
# 3. may use `install(1)` to do the file install
# 4. reformat to use Makeflie to generate this install script, so the version number should generate automatically
