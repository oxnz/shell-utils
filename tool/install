#!/usr/bin/env sh
#
#================================================================
#
# Filename: install.sh
#
# Author:       Oxnz
# Email:        yunxinyi@gmail.com
# Created:      [2014-12-09 19:11:50 CST]
# Last-update:  2014-12-09 19:11:50 CST
# Description:  ANCHOR
#
# Version:		0.0.1
# Revision:	[None]
# Revision history:	[None]
# Date Author Remarks:	[None]
#
# License:
# Copyright (c) 2013 Oxnz
#
# Distributed under terms of the [LICENSE] license.
# [license]
#
#================================================================
#

set -e

PROGNAME='INSTALL'
# version info, ref [http://semver.org] for more information
MAJORVER='0'
MINORVER='1'
PATCHVER='0'
RELEASE='beta'
VERSION="${MAJORVER}.${MINORVER}.${PATCHVER}-${RELEASE}"

# output
VERBOSE=1
DEBUG=0

# specify the install destination directory
PREFIX="${HOME}"
DESTDIR="${DESTDIR:-${HOME}/.shell}"
LOGFILE=

# url for the archive
ARCHURL='https://github.com/oxnz/shell-utils/archive/v0.1.0.tar.gz'
REPOURL='https://github.com/oxnz/shell-utils'

msgdump() {
	if [ $# -lt 2 ]; then
		msgdump "error" "msgdump: 2+ arguments expected, but $# found: '$@'"
		return 1
	fi
	local color=
	local level="$(echo "$1" | tr '[:lower:]' '[:upper:]')"
	shift
	local msg="$*"
	local out=1

	if [ -f "${LOGFILE}" ]; then
		echo "[${level}] ${msg}" >> "${LOGFILE}"
	fi

	case "${level}" in
		DEBUG)
			if [ "${VERBOSE}" -gt 0 ]; then
				color="\033[36m"
			else
				return
			fi
			;;
		INFO)
			color="\033[32m"
			;;
		WARNING)
			color="\033[33m"
			out=2
			;;
		ERROR)
			color="\033[31m"
			out=2
			;;
		*)
			msgdump 'error' "unexpected level: [${level}]"
			;;
	esac

	if [ "${out}" -eq 1 ]; then
		if [ -t 1 ]; then
			printf '%b' "${color}[${level}]\033[0m ${msg}\n"
		else
			echo "[${level}] ${msg}"
		fi
	else
		if [ -t 2 ]; then
			printf '%b' "${color}[${level}]\033[0m ${msg}\n" >&2
		else
			echo "[${level}] ${msg}" >&2
		fi
	fi
}

# pre-install process
initialize() {
	case "$(basename "$0")" in
		csh|tcsh)
			msgdump 'warning' "support for $0 is incomplete for now"
			msgdump 'warning' "please do not use in production"
			;;
		ash)
			msgdump 'error' "sorry, ash is not supported for now"
			;;
		*)
			msgdump 'debug' "install for shell: [$0]"
			;;
	esac
	if [ -e "${DESTDIR}" ]; then
		msgdump 'error' "destination already exists: [${DESTDIR}]"
		return 1
	fi

	if ! LOGFILE="$(mktemp)"; then
		msgdump 'error' "cannot create logfile"
		return 1
	fi
}

# post-install process
finalize() {
	logdir="${DESTDIR}/var/log"
	if [ ! -e "${logdir}" ] && ! mkdir -p "${logdir}"; then
		msgdump 'error' "cannot create log dir: [${logdir}]"
		return 1
	fi
	if ! mv "${LOGFILE}" "${logdir}/install.log"; then
		msgdump 'error' "cannot move log file to log dir: [${LOGFILE} -> ${logdir}]"
		return 1
	fi
	if ! touch "${logdir}/shell.log"; then
		msgdump 'error' "cannot create log file: [${logdir}/shell.log]"
		return 1
	fi
	msgdump 'debug' 'finalize success'
}

# install process
if which git > /dev/null; then
instproc() {
	trap "rm -rf "${DESTDIR}"" INT HUP QUIT TERM KILL
	if ! git clone "${REPOURL}" "${DESTDIR}"; then
		msgdump 'debug' 'git return non-zero status'
		return 1
	fi
	if [ ! -d "${DESTDIR}" ]; then
		# signal caught, incomplete repo was removed
		return 1
	fi
}
else
instproc() {
	msgdump 'info' "retrieve archive from uri: [${ARCHURL}]"
	local archive
	if ! archive="$(mktemp)"; then
		msgdump 'error' 'cannot create temporary archive'
		return 1
	else
		trap "rm -f "${archive}"" INT HUP QUIT TERM KILL
	fi
	if which wget > /dev/null; then
		if wget -nv "${ARCHURL}" -O "${archive}"; then
			msgdump 'debug' "download success: [file=${archive}]"
		else
			msgdump 'error' "unable to download shell-utils"
			return 1
		fi
	elif which curl > /dev/null; then
		msgdump 'debug' "'wget' not found, fallback to curl"
		if curl -o "${archive}" "${ARCHURL}"; then
			msgdump 'debug' "download success: [file=${archive}]"
		else
			msgdump 'error' "unable to download shell-utils"
			return 1
		fi
	else
		msgdump 'error' "cannot find 'wget' or 'curl' which is used to download the shell-utils"
	fi || msgdump 'error' "unable to download shell-utils"
	msgdump 'info' "extract archive: [${archive}] to [${DESTDIR}]"
	local tempdir
	if ! tempdir="$(mktemp -d)"; then
		msgdump 'error' 'failed to create tempdir directory'
		return 1
	fi
	msgdump 'debug' "tempdir directory created for extract: [${tempdir}]"
	if ! tar pzxf "${archive}" -C "${tempdir}"; then
		msgdump 'info' "extract failed: [tar pzxf ${archive} -C ${tempdir}]"
		return 1
	fi
	msgdump 'debug' "extracted to [${tempdir}] successfully"
	local srcdir
	if ! srcdir="${tempdir}/$(ls "${tempdir}")"; then
		msgdump 'error' "cannot access tempdir: [${tempdir}]"
		return 1
	fi
	if [ ! -d "${srcdir}" ]; then
		msgdump 'error' "source directory not found: [${srcdir}]"
		return 1
	fi
	msgdump 'debug' "move from [${srcdir}] to [${DESTDIR}]"
	if mv "${srcdir}" "${DESTDIR}"; then
		msgdump 'info' "installed to [${DESTDIR}] successfully"
	else
		msgdump 'error' "failed to move from [${srcdir}] to [${DESTDIR}]"
		return 1
	fi
	rmdir "${tempdir}" || msgdump 'warning' "unable to remove tempdir: [${tempdir}]"
}
fi

inst() {
	local src
	local dst
	local bkpdir="${DESTDIR}/var/bkp"

	if [ ! -d "${bkpdir}" ]; then
	   if !	mkdir -p "${bkpdir}"; then
		   msgdump 'error' "create backup dir failed: [${bkpdir}]"
		   return 1
	   fi
	fi
	for src in "${DESTDIR}/rc/"*; do
		dst="${HOME}/.$(basename "${src}")"
		if [ -h "${dst}" ]; then
			msgdump 'debug' "unlink symbol link: [${dst}]"
			if ! unlink "${dst}"; then
				msgdump 'warning' "unlink symbol link: [${dst}] failed"
				continue
			fi
		elif [ -e "${dst}" ]; then
			if mv "${dst}" "${bkpdir}"; then
				msgdump 'info' "backup [${dst}] to [${bkpdir}]"
			else
				msgdump 'warning' "failed to move [${dst}] to [${bkpdir}]"
				continue
			fi
		fi
		if ln -s "${src}" "${dst}"; then
			msgdump 'info' "install success: [${dst}]"
		else
			msgdump 'warning' "failed to create symbol link: [${dst}]"
		fi
	done
}

doinst() {
	msgdump 'info' 'intaller initializing'
	if ! initialize; then
		msgdump 'error' 'installer failed to initialize'
		return 1
	fi
	msgdump 'info' "installing to [${DESTDIR}]"
	if ! instproc; then
		msgdump 'error' 'install process failed'
		return 1
	fi
	msgdump 'info' "installing"
	if ! inst; then
		msgdump 'warning' "install failed"
	fi
	msgdump 'info' "installer finalizing"
	if ! finalize; then
		msgdump 'warning' "installer finalizing failed"
	fi
}

uninst() {
	msgdump 'info' "collecting information for uninstall"
	if DESTDIR="$(dirname "$(dirname "$(pwd)/$0")")"; then
		msgdump 'info' "path: [${DESTDIR}]"
	else
		msgdump 'error' "cannot find install path"
		return 1
	fi
	local src lnk dst bkp name
	for src in "${DESTDIR}"/rc/*; do
		name="$(basename "${src}")"
		lnk="${HOME}/.${name}"
		bkp="${DESTDIR}/var/bkp/${name}"
		if ! dst="$(readlink -e "${lnk}")"; then
			msgdump 'warning' "dangling symbol link found: [${lnk}]"
		fi
		if [ "${dst}" = "${src}" ]; then
			msgdump 'info' "uninstalling [${lnk}]"
			if ! unlink "${lnk}"; then
				msgdump 'warning' "unable to unlink [${lnk}]"
				continue
			fi
		else
			msgdump 'warning' "[${lnk}] changed since install, ignored"
			continue
		fi
		if [ -e "${bkp}" ]; then
			msgdump 'info' "restoring [${bkp}] to [${lnk}]"
			if ! mv "${bkp}" "${lnk}"; then
				msgdump 'error' "unable to restore [${lnk}]"
				continue
			fi
		fi
	done
}

main() {
	[ -t 1 ] && printf '%b' "\033[32;2m"
	cat << EOF
         __         ____            __  _ __
   _____/ /_  ___  / / /     __  __/ /_(_) /____
  / ___/ __ \/ _ \/ / /_____/ / / / __/ / / ___/
 (__  ) / / /  __/ / /_____/ /_/ / /_/ / (__  )
/____/_/ /_/\___/_/_/      \__,_/\__/_/_/____/
------------------------------------------------
       Shell-utils installer ${VERSION}
------------------------------------------------
EOF
	[ -t 1 ] && printf '%b' "\033[0m\n"
	local OPTIND=1
	local opt
    while getopts "d:huv" opt; do
		case $opt in
			d)
				DESTDIR=$OPTARG
				if [ -d $DESTDIR ]; then
					msgdump 'error' "directory already exists: [$DESTDIR]"
					return 1
				fi
				;;
			D)
				DEBUG=1
				VERBOSE=$((VERBOSE+1))
				set -x
				;;
			h)
				cat << EOH
Usage: $0 [options]
options:
    -d <dir>  install to the specified DIR
    -D	      enable debug mode
    -h	      show this message and exit
    -v	      specify verbose level
EOH
				return
				;;
			u)
				if uninst; then
					msgdump 'info' "uninstall success"
				else
					msgdump 'error' "uninstall failed"
					return 1
				fi
				return
				;;
			v)
				VERBOSE=$((VERBOSE+1))
				;;
		esac
	done
	shift $((OPTIND-1))

	if [ $# -ne 0 ]; then
		msgdump 'error' "unexpected argument(s): $@"
		return 1
	fi

	if doinst; then
		msgdump 'info' 'install success'
	else
		cat << EOF
it seems something wrong happened during install,
please refer to the ${LOGFILE} for more information
bug report: https://github.com/oxnz/shell-utils/issues
EOF
		return 1
	fi
}

main $@
